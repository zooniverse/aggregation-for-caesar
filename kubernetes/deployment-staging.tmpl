apiVersion: apps/v1
kind: Deployment
metadata:
  name: aggregation-staging-app
  labels:
    app: aggregation-staging-app
spec:
  selector:
    matchLabels:
      app: aggregation-staging-app
  template:
    metadata:
      labels:
        app: aggregation-staging-app
    spec:
      containers:
        - name: aggregation-staging-app
          image: ghcr.io/zooniverse/aggregation-for-caesar:__IMAGE_TAG__
          ports:
            - containerPort: 80
          resources:
            requests:
              memory: "500Mi"
              cpu: "500m"
            limits:
              memory: "1000Mi"
              cpu: "1000m"
          startupProbe:
            httpGet:
              path: /
              port: 80
            # wait 6 * 10 seconds(default periodSeconds) for the container to start
            # after this succeeds once the liveness probe takes over
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /
              port: 80
            # allow a longer response time than 1s
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 80
            # start checking for readiness after 20s (to serve traffic)
            initialDelaySeconds: 20
            # allow a longer response time than 1s
            timeoutSeconds: 10
          env:
            - name: FLASK_ENV
              value: production
            - name: CELERY_BROKER_URL
              value: redis://aggregation-staging-redis:6379/0
            - name: CELERY_RESULT_BACKEND
              value: redis://aggregation-staging-redis:6379/0
            - name: PANOPTES_URL
              value: https://panoptes-staging.zooniverse.org/
            - name: PANOPTES_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: aggregation-staging-env
                  key: PANOPTES_CLIENT_ID
            - name: PANOPTES_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: aggregation-staging-env
                  key: PANOPTES_CLIENT_SECRET
            - name: MAST_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: aggregation-staging-env
                  key: MAST_AUTH_TOKEN
            - name: MAST_PROD_TOKEN
              valueFrom:
                secretKeyRef:
                  name: aggregation-staging-env
                  key: MAST_PROD_TOKEN
            - name: SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  name: aggregation-staging-env
                  key: SENTRY_DSN
            - name: NEW_RELIC_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: aggregation-staging-env
                  key: NEW_RELIC_LICENSE_KEY
            - name: NEW_RELIC_APP_NAME
              value: 'Aggregation Caesar (Staging)'
          volumeMounts:
            - name: aggregation-staging-volume
              mountPath: /usr/src/aggregation/tmp
      volumes:
        - name: aggregation-staging-volume
          persistentVolumeClaim:
            claimName: aggregation-staging-data-storage
---
apiVersion: v1
kind: Service
metadata:
  name: aggregation-staging-app
spec:
  selector:
    app: aggregation-staging-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aggregation-staging-celery
  labels:
    app: aggregation-staging-celery
spec:
  selector:
    matchLabels:
      app: aggregation-staging-celery
  template:
    metadata:
      labels:
        app: aggregation-staging-celery
    spec:
      containers:
        - name: aggregation-staging-celery
          image: ghcr.io/zooniverse/aggregation-for-caesar:__IMAGE_TAG__
          resources:
            requests:
              memory: "500Mi"
              cpu: "500m"
            limits:
              memory: "1000Mi"
              cpu: "1000m"
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - celery inspect ping -d celery@$(hostname) | grep -q OK
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - celery inspect ping -d celery@$(hostname) | grep -q OK
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          args: ["/usr/src/aggregation/scripts/start-celery.sh"]
          env:
            - name: FLASK_ENV
              value: production
            - name: CELERY_BROKER_URL
              value: redis://aggregation-staging-redis:6379/0
            - name: CELERY_RESULT_BACKEND
              value: redis://aggregation-staging-redis:6379/0
            - name: PANOPTES_URL
              value: https://panoptes-staging.zooniverse.org/
            - name: PANOPTES_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: aggregation-staging-env
                  key: PANOPTES_CLIENT_ID
            - name: PANOPTES_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: aggregation-staging-env
                  key: PANOPTES_CLIENT_SECRET
            - name: MAST_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: aggregation-staging-env
                  key: MAST_AUTH_TOKEN
            - name: MAST_PROD_TOKEN
              valueFrom:
                secretKeyRef:
                  name: aggregation-staging-env
                  key: MAST_PROD_TOKEN
            - name: SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  name: aggregation-staging-env
                  key: SENTRY_DSN
            - name: NEW_RELIC_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: aggregation-staging-env
                  key: NEW_RELIC_LICENSE_KEY
            - name: NEW_RELIC_APP_NAME
              value: 'Aggregation Caesar (Staging)'
          volumeMounts:
            - name: aggregation-staging-volume
              mountPath: /usr/src/aggregation/tmp
      volumes:
        - name: aggregation-staging-volume
          persistentVolumeClaim:
            claimName: aggregation-staging-data-storage
---
apiVersion: v1
kind: Service
metadata:
  name: aggregation-staging-celery
spec:
  selector:
    app: aggregation-staging-celery
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: aggregation-staging-redis
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: azurefile
  resources:
    requests:
      storage: 1Gi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: aggregation-staging-data-storage
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: azurefile
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aggregation-staging-redis
  labels:
    app: aggregation-staging-redis
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: aggregation-staging-redis
  template:
    metadata:
      labels:
        app: aggregation-staging-redis
    spec:
      tolerations:
      - key: "servicelife"
        operator: "Equal"
        value: "longlife"
        effect: "NoSchedule"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: servicelife
                operator: In
                values:
                - longlife
      containers:
        - name: aggregation-staging-redis
          image: redis
          resources:
            requests:
              memory: "100Mi"
              cpu: "10m"
            limits:
              memory: "100Mi"
              cpu: "500m"
          volumeMounts:
          - name: aggregation-staging-redis-data
            mountPath: "/data"
      volumes:
        - name: aggregation-staging-redis-data
          persistentVolumeClaim:
            claimName: aggregation-staging-redis
---
apiVersion: v1
kind: Service
metadata:
  name: aggregation-staging-redis
spec:
  selector:
    app: aggregation-staging-redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aggregation-staging-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
    nginx.ingress.kubernetes.io/proxy-body-size: 20m
    nginx.ingress.kubernetes.io/set-real-ip-from: "10.0.0.0/8"
spec:
  tls:
  - hosts:
    - aggregation-staging.zooniverse.org
    secretName: aggregation-staging-tls-secret
  rules:
  - host: aggregation-staging.zooniverse.org
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: aggregation-staging-app
            port:
              number: 80
